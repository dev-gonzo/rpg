// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"  // mantenha comentado para usar padrão
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  isMaster   Boolean     @default(false)
  characters Character[] // relação inversa
}

model Character {
  id String @id @default(uuid())

  // Dados básicos
  name        String
  profession  String?
  birthDate   DateTime
  birthPlace  String?
  gender      String?
  heightCm    Int?
  weightKg    Int?
  age         Int?
  apparentAge Int?
  religion    String?

  // Dados místicos
  secretSociety String?
  cabala        String?
  rank          String?
  mentor        String?
  societyAllies String[] @default([])

  // Relacionamentos complementares
  relevantPeople RelevantPerson[]

  attributes          Attribute?            @relation("CharacterAttribute")
  improvements        Improvement[]
  skills              Skill[]
  combatSkill         CombatSkill[]
  characterBackground CharacterBackground[]
  pathsAndForms       PathsAndForms?
  ritual              Ritual[]
  equipments          Equipment[]
  weapon              Weapon[]
  Notes               Note[]

  hitPoints              Int?
  currentHitPoints       Int?
  initiative             Int?
  currentInitiative      Int?
  heroPoints             Int?
  currentHeroPoints      Int?
  magicPoints            Int?
  currentMagicPoints     Int?
  faithPoints            Int?
  currentFaithPoints     Int?
  protectionIndex        Int?
  currentProtectionIndex Int?

  level            Int?
  experiencePoints Int?

  isKnown Boolean @default(false)

  image String?

  // Relacionamento com usuário controlador (opcional)
  controlUserId String? // FK opcional
  controlUser   User?   @relation(fields: [controlUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RelevantPerson {
  id          String    @id @default(uuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  category         String // "enemies", "allies", "contacts", "relevantPeople"
  name             String
  apparentAge      Int?
  city             String?
  profession       String?
  briefDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attribute {
  id          String    @id @default(uuid())
  character   Character @relation("CharacterAttribute", fields: [characterId], references: [id])
  characterId String    @unique

  CON  Int
  FR   Int
  DEX  Int
  AGI  Int
  INT  Int
  WILL Int
  PER  Int
  CAR  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Improvement {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String
  name        String
  cost        Int
  kitValue    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String

  group     String?
  skill     String
  attribute String?
  cost      Int
  kitValue  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CombatSkill {
  id          String    @id @default(uuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  group           String? // opcional
  skill           String
  attribute       String? // "CON", "FR", "DEX", "AGI", "INT", "WILL", "PER", "CAR"
  attackCost      Int
  defenseCost     Int
  attackKitValue  Int
  defenseKitValue Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CharacterBackground {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String

  title    String
  text     String
  isPublic Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PathsAndForms {
  characterId String    @id
  character   Character @relation(fields: [characterId], references: [id])

  understandForm Int
  createForm     Int
  controlForm    Int

  fire      Int
  water     Int
  earth     Int
  air       Int
  light     Int
  darkness  Int
  plants    Int
  animals   Int
  humans    Int
  spiritum  Int
  arkanun   Int
  metamagic Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ritual {
  id          String    @id @default(uuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  name        String
  pathsForms  String
  description String
  bookPage    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id          String    @id @default(uuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  name           String
  quantity       Int
  classification String

  description         String?
  kineticProtection   Int?
  ballisticProtection Int?
  dexterityPenalty    Int?
  agilityPenalty      Int?
  initiative          Int?

  bookPage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Weapon {
  id          String    @id @default(uuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  name        String
  description String?
  damage      String
  initiative  Int
  range       String?
  rof         String? // Rate of Fire
  ammunition  String?

  bookPage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String
  note        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Journal {
  id String @id @default(uuid())

  image1 String? // Base64 ou URL
  image2 String?
  image3 String?
  text   String

  featured Boolean @default(false)

  status    String
  isPublic  Boolean  @default(false) @map("ispublic")
  createdAt DateTime @default(now()) @map("createdat")
  updatedAt DateTime @default(now()) @map("updatedat")
}
